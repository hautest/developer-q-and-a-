export const answer8 = `# Promise

# 동기 vs 비동기 ?

### 동기란?

자바스크립트의 기본동작이다. 한 코드가 실행되는 동안 다른 작업들을 멈추고 기다린다.

요청을 보내고 응답이 돌아와야 다음 동작을 실행한다.

### 비동기란?

요청을 보내고 응답의 여부와 상관없이 다음 동작을 실행한다.

# Callback 지옥이란 ?

우선 서버와의 통신을 할때는 비동기로 통신을 한다(동기식으로 요청을 하면 서버로부터 응답이 올때동안 다음 동작을 안한다)

서버로부터 응답값이 오면 그 응답값을 이용하는데, 그냥 이용을 하면 자바스크립트는 동기식으로 작동하기 때문에 undifined로 값을 출력할것이다(서버로부터 응답값이 오기전에 실행되기 때문에 data값이 undifined상태이다)

그러므로 요청을 보낸뒤 응답값을 callback함수안에 넣어서 해결할 수 있는데 이러한 콜벡함수를 연속으로 사용하면 코드의 가독성이 떨어지고 유지보수하기도 어렵다

# Promise란?

자바스크립트 비동기 처리를 위한 객체이다.

## Promise의 상태

- Pending : 비동기 처리 로직이 아직 완료되지 않은 상태
- Fulfilled : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
- Rejected : 비동기 처리가 실패하거나 오류가 발생한 상태

## Promise동작

Promise를 생성하고 콜백함수를 넣는다(콜벡함수에 resolve, reject를 파라미터로 받는다)

호출 결과를 then(resolve에 들어간 값이 온다), catch(reject에 들어간 값이 온다)

then은 또 다른 Promise를 반환하기 때문에 then.then.then… 처럼 then을 연결해서 사용할 수 있다.

# **async & await 란?**

async는 함수 앞에 붙이고 await는 비동기 처리 메소드(Promise를 return해야한다) 앞에 붙여서 사용한다

단순한 Promise 사용해서 then.then.연결하는것이 가독성이 떨어져서 나왔다

### 예외 처리

try catch 문법을 사용해서 처리한다`;
